import logging

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from pathlib import Path

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ —Ç–æ–∫–µ–Ω
# —Ç–æ–∫–µ–Ω –≤ env
import config
logging.basicConfig(level=logging.DEBUG)
bot = Bot(token=config.TOKEN)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
# TODO: –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª (—Ä–µ–¥–∏—Å), –Ω–æ –Ω–∞–¥–æ –ø–æ–Ω—è—Ç—å –∫–∞–∫
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

gender_list = ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]

# –ì—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    name = State()  # Will be represented in storage as 'Form:name'
    age = State()  # Will be represented in storage as 'Form:age'
    gender = State()  # Will be represented in storage as 'Form:gender'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–ª–µ–¥. –≤—ã–∑–æ–≤ –ø–æ–ø–∞–¥–µ—Ç –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–æ state=Form.name
    await Form.name.set()

    await message.reply("–ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç")


# You can use state '*' if you need to handle all states
# –ï—Å–ª–∏ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ cancel
# –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—ã–ª –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç cancel, —Ç–æ —á–∏—Å—Ç–∏–º —Å—Ç–æ—Ä–∞–¥–∂
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        logging.info("No state already")
        return

    logging.info('Cancelling state %r', current_state)
    # –û—Ç–º–µ–Ω—è–µ–º
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())

# –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    """
    Process user name
    """
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ, " + data['name'] + ", —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


# –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Form.age, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
# –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–∏—Å–µ–ª) - —Å–æ–æ–±—â–µ–Ω–µ –æ–± –æ—à–∏–±–∫–µ
@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.age)
async def process_age_invalid(message: types.Message):
    """
    If age is invalid
    """
    return await message.reply("–í–æ–∑—Ä–∞—Å—Ç –∫–∞–∫-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


# –ü—Ä–∏—à–ª–æ —á–∏—Å–ª–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = Form.age - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    # Update state and data
    await Form.next()
    await state.update_data(age=int(message.text))

    # Configure ReplyKeyboardMarkup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(*gender_list)

    await message.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup)

# –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ —Ç–æ—Ç –ø–æ–ª (?)
@dp.message_handler(lambda message: message.text not in gender_list, state=Form.gender)
async def process_gender_invalid(message: types.Message):
    """
    In this example gender has to be one of: Male, Female, Other.
    """
    return await message.reply("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞")


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –∏ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(state=Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        # Remove keyboard
        markup = types.ReplyKeyboardRemove()

        # And send message
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–û—Ç–ª–∏—á–Ω–æ, –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.'),
                md.text('–°–µ–π—á–∞—Å –º—ã –ø–æ–∫–∞–∂–µ–º —Ç–µ–±–µ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:'),
                md.text('–ò–º—è:', md.bold(data['name'])),
                md.text('–í–æ–∑—Ä–∞—Å—Ç:', md.code(data['age'])),
                md.text('–ü–æ–ª:', data['gender']),
                md.text("\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –¥–æ–ª–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, –¥–æ–∂–¥–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏ –Ω–∏–∫—É–¥–∞ –Ω–µ —É—Ö–æ–¥–∏ üòä"),
                sep='\n',
            ),
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,
        )

    # Finish conversation
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
